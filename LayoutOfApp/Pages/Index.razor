@page "/"
@inject HttpClient Http

<PageTitle>OnlineCoursesAnalyzer</PageTitle>
<div class="row">
    <div class="col-4">
        <div class="upload-container @hoverClass">
            <img id="upload-image" src="1.svg">
            <InputFile id="file-input" OnChange="@LoadFile" @ondragover="OnDragover" @ondragleave="OnDragleave" />
            <p text-align>Нажмите, чтобы добавить файл <br />или переместите его сюда.</p>
        </div>
    </div>
    <div class="col-4">
        <div class="arrow arrow-left">
            Поле для данных об успеваемости
        </div>
        <div class="arrow arrow-right">
            Поле для данных о результатах прокторинга
        </div>
        <button type="button" class="btn btn-outline-dark">
            Получить результат
        </button>
        <div class="message-block @validationClass">@message</div>
    </div>
    <div class="col-4">
        <div class="upload-container @hoverClass">
            <img id="upload-image" src="1.svg">
            <InputFile id="file-input" OnChange="@LoadFile" @ondragover="OnDragover" @ondragleave="OnDragleave" />
            <p text-align>Нажмите, чтобы добавить файл <br />или переместите его сюда.</p>
        </div>
    </div>
</div>


@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Фамилия</th>
                <th>Имя</th>
                <th>Отчество</th>
                <th>Оценка</th>
                <th>Статус прокторинга</th>
            </tr>
        </thead>
        <tbody>
            @if (studentsData == null)
            {
                throw new InvalidProgramException();
            }
            @foreach (var forecast in studentsData)
            {
                <tr>
                    <td>@forecast.SecondName</td>
                    <td>@forecast.FirstName</td>
                    <td>@forecast.Patronymic</td>
                    <td>@forecast.Assessment</td>
                    <td>@forecast.ProctoringStatus</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    //public enum Assesments { A, B, C, D, E, F };
    private Students[]? students;
    private List<Students>? studentsData;

    protected override async Task OnInitializedAsync()
    {
        students = await Http.GetFromJsonAsync<Students[]>("sample-data/students.json");
        studentsData = new List<Students>();
        if (students != null)
        {
            foreach (var student in students)
            {
                studentsData.Add(student);
            }
        }
    }

    public class Students
    {
        public string SecondName { get; set; }

        public string FirstName { get; set; }

        public string Patronymic { get; set; }

        public string Assessment { get; set; }

        public string ProctoringStatus { get; set; }

        public Students()
        {
            this.SecondName = "Анонимов";
            this.FirstName = "Аноним";
            this.Patronymic = "Анонимович";
            this.Assessment = "A";
            this.ProctoringStatus = "Пройден";
        }
    }

    private string hoverClass;
    private string validationClass;
    private string? message;

    public Index()
    {
        hoverClass = string.Empty;
        validationClass = string.Empty;
    }

    void OnDragover() => hoverClass = "hover";

    void OnDragleave() => hoverClass = string.Empty;

    void Successfully(string text)
    {
        validationClass = "successfull";
        message = text;
    }

    void Unsuccessfully(string text)
    {
        validationClass = "unsuccessfull";
        message = text;
    }

    private void LoadFile(InputFileChangeEventArgs inputFile)
    {
        OnDragleave();
        var file = inputFile.File;
        if (file == null)
        {
            message = $"Файл не добавлен";
            return;
        }

        if (file.Size > 512000 * 4)
        {
            Unsuccessfully($"'{file.Name}' не добавлен. Слишком большой размер");
        }

        var stream = file.OpenReadStream(512000 * 4);
        Successfully($"'{file.Name}' успешно добавлен");

        var newStudent = new Students();
        if (studentsData == null)
        {
            throw new InvalidProgramException();
        }

        studentsData.Add(newStudent);
    }
}
